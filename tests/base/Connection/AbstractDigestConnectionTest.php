<?php

namespace App\Tests\base\Connection;

use GuzzleHttp\Client;
use iikoExchangeBundle\Contract\Auth\DigestAuthDataBuilderInterface;
use iikoExchangeBundle\Contract\Auth\TokenAuthDataInterface;
use iikoExchangeBundle\Contract\AuthDataInterface;
use iikoExchangeBundle\Contract\AuthStorageInterface;
use iikoExchangeBundle\Library\base\Connection\AbstractConnection;
use iikoExchangeBundle\Library\base\Connection\AbstractDigestConnection;
use iikoExchangeBundle\Library\base\Connection\SandboxStorage;
use iikoExchangeBundle\Library\base\Connection\TokenAuthData;
use Monolog\Logger;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;

class AbstractDigestConnectionTest extends TestCase
{
	/** @var AbstractDigestConnection */
	protected $instance;

	protected function setUp(): void
	{
		parent::setUp(); // TODO: Change the autogenerated stub

		$this->instance = new TestConnection();
		$this->instance->setLogger($this->createMock(Logger::class));
	}

	protected function getProtectedProperty(&$object, $property)
	{
		$reflection = new \ReflectionClass(get_class($object));
		$reflectionProperty = $reflection->getProperty($property);
		$reflectionProperty->setAccessible(true);
		return $reflectionProperty->getValue($object);
	}

	public function testSetLogger()
	{
		$logger = $this->createMock(Logger::class);
		$this->instance->setLogger($logger);

		$this->assertEquals($logger, $this->getProtectedProperty($this->instance, 'logger'));

	}

	public function testGetClient()
	{
		$ul = 'http://localhost.com';

		$authData = new TokenAuthData();
		$authData->setUrl($ul);

		$this->instance->setAuthStorage(new SandboxStorage());
		$this->instance->withAuthData($authData);

		$this->assertEquals($ul, $this->instance->getAuthData()->getUrl());

		$client = $this->instance->getClient();
		$this->assertInstanceOf(Client::class, $client);
		$this->assertEquals($this->getProtectedProperty($client, 'config')['base_uri'], $ul);
	}

	public function testSetAuthData()
	{

	}

	public function testSetAuthStorage()
	{

	}

	public function testSendRequest()
	{

	}

	public function testGetAuthData()
	{

	}
}

class TestConnection extends AbstractDigestConnection
{


	protected function login()
	{
		$this->authStorage->storeAuthData($this->authStorage->getAuthData()->setToken('123'));
	}
}