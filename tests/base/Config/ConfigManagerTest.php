<?php

namespace App\Tests\base\Config;

use App\Tests\ReflectionHelper;
use iikoExchangeBundle\Contract\ConfigItemInterface;
use iikoExchangeBundle\Library\base\Config\ConfigDirectory;
use iikoExchangeBundle\Library\base\Config\ConfigManager;
use iikoExchangeBundle\Library\iiko\Config\SandboxConfigStorage;
use Monolog\Logger;
use PHPUnit\Framework\TestCase;
use Symfony\Component\EventDispatcher\EventDispatcher;

class ConfigManagerTest extends TestCase
{
	/** @var ConfigManager */
	protected $instance;
	/** @var ConfigDirectory */
	protected $directory;
	/** @var SandboxConfigStorage */
	protected $storage;
	protected function setUp(): void
	{
		parent::setUp(); // TODO: Change the autogenerated stub

		$logger = $this->createMock(Logger::class);
		$dispatcher = $this->createMock(EventDispatcher::class);
		$this->storage = new SandboxConfigStorage();
		$this->directory = new ConfigDirectory($logger, $dispatcher);

		$this->instance = new ConfigManager($logger, $this->storage, $this->directory, $dispatcher);
	}

	public function testGetConfig()
	{
		$this->directory->registerConfigItem("php", 'unit', new TestConfigItem(1));
		$this->assertEquals(1, $this->instance->getConfig('php', 1, 'unit')['unit']->getValue());

		$this->storage->saveConfig('php', 'unit', new TestConfigItem(2), 1);
		$this->assertEquals(2, $this->instance->getConfig('php', 1, 'unit')['unit']->getValue());

	}



	public function testExposeConfigurations()
	{

	}

	public function testSaveConfig()
	{

	}
}

class TestConfigItem  implements ConfigItemInterface
{
	protected $value;

	public function __construct($value = null)
	{
		$this->value = $value;
	}

	public function getCode(): string
	{
		return "test";
	}

	public function getType(): string
	{
		return self::TYPE_STRING;
	}

	public function getValue()
	{
		return $this->value;
	}

	public function normalize()
	{
		return $this->value;
	}

	public function setValue($value)
	{
		$this->value = $value;
	}

	/**
	 * @inheritDoc
	 */
	public function jsonSerialize()
	{
		return $this->value;
	}
}
