<?php


namespace iikoExchangeBundle\Library\iiko\Request;

use iikoExchangeBundle\Contract\Configuration\ConfigDirectoryInterface;
use iikoExchangeBundle\Contract\Configuration\ConfigManagerInterface;
use iikoExchangeBundle\Contract\Configuration\ConfigurableInterface;
use iikoExchangeBundle\Contract\DataRequest\AccountDependInterface;
use iikoExchangeBundle\Library\base\Config\Types\DateDiffConfig;
use iikoExchangeBundle\Library\iiko\Reports\iikoReportFilter;
use iikoExchangeBundle\Library\iiko\Reports\Olap\Version52\Sales\FilterFields;
use Psr\Http\Message\RequestInterface;

class OlapSalesDataRequest extends AbstractOlapDataRequest implements ConfigurableInterface, AccountDependInterface
{
	const DOMAIN = "GENERIC_OLAP_SALES";

	public function __clone()
	{
		$this->account = null;
		$this->restaurant = null;
	}

	protected $account;
	protected $restaurant;
	protected $configDomain;

	const CONFIG_OPEN_DATE = 'OpenDateTyped';
	/**
	 * @var ConfigManagerInterface
	 */
	private $configManager;

	protected function getOlapType(): string
	{
		return self::TYPE_SALES;
	}

	public function getRequest(): RequestInterface
	{
		$config = $this->configManager->getConfig(self::DOMAIN, $this->account, null, $this->restaurant);

		$this->filterFields[FilterFields::OpenDateTyped] = iikoReportFilter::dateRange(new \DateTime($config[self::CONFIG_OPEN_DATE]->getValue()), new \DateTime('tomorrow'), true, false);

		return parent::getRequest(); // TODO: Change the autogenerated stub
	}

	/**
	 * @inheritDoc
	 * @return $this
	 */
	public function setConfigManager(ConfigManagerInterface $configManager) : ConfigurableInterface
	{
		$this->configManager = $configManager;
		return $this;
	}

	/**
	 * @inheritDoc
	 * @return $this
	 */
	public function setAccount($account)
	{
		$this->account = $account;
		return $this;
	}


	/**
	 * @inheritDoc
	 */
	public function registerConfigStack(ConfigDirectoryInterface $directory)
	{
		$directory->registerConfigItem(self::DOMAIN, self::CONFIG_OPEN_DATE, new DateDiffConfig('now'));
	}

	/**
	 * @param string $domain
	 * @return $this
	 */
	public function withDomain(string $domain): ConfigurableInterface
	{
		$new = clone $this;
		$new->configDomain = $domain;
		$new->account = null;
		$new->restaurant = null;

		return $new;
	}
}