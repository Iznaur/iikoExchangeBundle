services:

    exchange.iiko.auth.storage:
        class: iikoExchangeBundle\Library\base\Connection\SandboxStorage

    exchange.iiko.connection:
        class: iikoExchangeBundle\Library\iiko\Connection\iikoConnection
        calls:
            - [setAuthStorage, ["@exchange.iiko.auth.storage"]]
            - [setLogger, ["@logger"]]

    exchange.iiko.provider:
        class: iikoExchangeBundle\Library\iiko\Connection\iikoProvider
        arguments: ["@logger", "@exchange.iiko.auth.storage"]
        calls:
            - [ withConnection, ["@exchange.iiko.connection", false]]

    exchange.iiko.config_storage:
        class: iikoExchangeBundle\Library\iiko\Config\SandboxConfigStorage


    # MAIN SERVICES

    exchange.config.directory:
        class: iikoExchangeBundle\Library\base\Config\ConfigDirectory
        arguments: ["@logger", "@event_dispatcher"]

    exchange.config.manager:
        class: iikoExchangeBundle\Library\base\Config\ConfigManager
        arguments: ["@logger", "@exchange.iiko.config_storage", "@exchange.config.directory", "@event_dispatcher" ]

    exchange.directory:
        class: iikoExchangeBundle\Directory\ExchangeDirectory
        arguments: ['@logger', '@event_dispatcher']

    # OLAP

    exchange.olap.sales.generic:
        class: iikoExchangeBundle\Library\iiko\Request\OlapSalesDataRequest
        calls:
            - [setConfigManager, ["@exchange.config.manager"]]

    # Dictionaries

    exchange.dictionary.account:
        class: iikoExchangeBundle\Library\iiko\Request\BaseDictionaryRequest
        arguments: ["@logger"]
        calls:
            - [setType, [!php/const:iikoExchangeBundle\Library\iiko\Model\IikoEntityDto::ENTITY_ACCOUNT]]

    exchange.dictionary.payment_type:
        class: iikoExchangeBundle\Library\iiko\Request\BaseDictionaryRequest
        arguments: [ "@logger" ]
        calls:
            - [ setType, [ !php/const:iikoExchangeBundle\Library\iiko\Model\IikoEntityDto::ENTITY_PAYMENT_TYPE ] ]

