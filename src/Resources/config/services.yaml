services:

    exchange.iiko.auth.storage:
        class: iikoExchangeBundle\Library\base\Connection\SandboxStorage

    exchange.iiko.connection:
        class: iikoExchangeBundle\Library\iiko\Connection\iikoConnection
        calls:
            - [ setAuthStorage, [ "@exchange.iiko.auth.storage" ] ]
            - [ setLogger, [ "@logger" ] ]

    exchange.iiko.provider:
        class: iikoExchangeBundle\Library\iiko\Connection\iikoProvider
        calls:
            - [ withConnection, [ "@exchange.iiko.connection", false ] ]
            - [ setAuthStorage, [ "@exchange.iiko.auth.storage" ] ]
            - [ setLogger, [ "@logger" ] ]

    exchange.iiko.config_storage:
        class: iikoExchangeBundle\Library\iiko\Config\SandboxConfigStorage


    # MAIN SERVICES

    exchange.directory:
        class: iikoExchangeBundle\Directory\ExchangeDirectory
        arguments: [ '@logger', '@event_dispatcher' ]

    # OLAP



    exchange.schedule.cron:
        class: iikoExchangeBundle\Library\base\Schedule\CronSchedule
        arguments: [ "0 7 * * *" ]

    exchange.schedule.events:
        class: iikoExchangeBundle\Library\base\Schedule\EventSchedule
        arguments: [ [ ] ]

#    # Dictionaries
#
#    exchange.dictionary.account:
#        class: iikoExchangeBundle\Library\iiko\Request\BaseDictionaryRequest
#        arguments: ["@logger"]
#        calls:
#            - [setType, [!php/const:iikoExchangeBundle\Library\iiko\Model\IikoEntityDto::ENTITY_ACCOUNT]]
#
#    exchange.dictionary.employee:
#        class: iikoExchangeBundle\Library\iiko\Request\EmployeeDictionaryRequest
#        arguments: [ "@logger" ]
#
#
#    exchange.dictionary.payment_type:
#        class: iikoExchangeBundle\Library\iiko\Request\BaseDictionaryRequest
#        arguments: [ "@logger" ]
#        calls:
#            - [ setType, [ !php/const:iikoExchangeBundle\Library\iiko\Model\IikoEntityDto::ENTITY_PAYMENT_TYPE ] ]

