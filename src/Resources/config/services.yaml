imports:
    - { resource: parameters.yml }
services:

    #iiko sandbox services
    exchange.iiko.auth.digest_auth_data:
        class: iikoExchangeBundle\Library\base\Connection\DigestAuthData
        calls:
            - [setUrl, ["%iiko_exchanger_server%"]]
            - [setTokenName, ["key"]]
            - [setUserName, ["%iiko_exchanger_user%"]]
            - [setPassword, ["%iiko_exchanger_password_hash%"]]

    exchange.iiko.auth.storage:
        class: iikoExchangeBundle\Library\base\Connection\TemporaryStorage
        calls:
            - [storeAuthData, ["@exchange.iiko.auth.digest_auth_data"]]
    exchange.iiko.connection:
        class: iikoExchangeBundle\Library\iiko\Connection\iikoConnection
        calls:
            - [setAuthStorage, ["@exchange.iiko.auth.storage"]]
            - [setLogger, ["@logger"]]

    exchange.iiko.provider:
        class: iikoExchangeBundle\Library\iiko\Connection\iikoProvider
        arguments: ["@logger", "@exchange.iiko.auth.storage"]
        calls:
            - [ withConnection, ["@exchange.iiko.connection", true]]
    # Dictionaries

    exchange.dictionary.account:
        class: iikoExchangeBundle\Library\iiko\Request\BaseDictionaryRequest
        arguments: ["@logger"]
        calls:
            - [setType, [!php/const:iikoExchangeBundle\Library\iiko\Model\IikoEntityDto::ENTITY_ACCOUNT]]
    exchange.dictionary.payment_type:
        class: iikoExchangeBundle\Library\iiko\Request\BaseDictionaryRequest
        arguments: [ "@logger" ]
        calls:
            - [ setType, [ !php/const:iikoExchangeBundle\Library\iiko\Model\IikoEntityDto::ENTITY_PAYMENT_TYPE ] ]

